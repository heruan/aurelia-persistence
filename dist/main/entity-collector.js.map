{"version":3,"sources":["../../src/main/entity-collector.ts"],"names":[],"mappings":"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","file":"entity-collector.js","sourcesContent":["import { inject } from \"aurelia-dependency-injection\";\nimport { BindingEngine, Disposable } from \"aurelia-binding\";\nimport { EventAggregator } from \"aurelia-event-aggregator\";\nimport { CancelablePromise } from \"aurelia-utils\";\nimport { TaskQueue } from \"aurelia-task-queue\";\nimport { EntityService } from \"./entity-service\";\nimport { Sorting } from \"./sorting\";\nimport { FilterQuery } from \"./filter-query\";\nimport { FilterBinding } from \"./filter-binding\";\n\n@inject(BindingEngine, TaskQueue)\nexport class EntityCollector<E extends Object> extends EventAggregator implements Disposable {\n\n    public static ENTITIES_LOADED: string = \"entities.loaded\";\n\n    public static SCROLL_RETRIEVE_INCREMENT: number = 25;\n\n    private bindingEngine: BindingEngine;\n\n    private taskQueue: TaskQueue;\n\n    private entityService: EntityService<E>;\n\n    private currentFilter: FilterQuery;\n\n    private defaultFilter: FilterQuery;\n\n    private activationPromise: Promise<any>;\n\n    private loadCancelables: CancelablePromise<any>[] = [];\n\n    private countCancelables: CancelablePromise<any>[] = [];\n\n    private disposables: Disposable[] = [];\n\n    public sorting: Sorting;\n\n    public limit: number = 25;\n\n    public skip: number = 0;\n\n    public countTotal: number = 0;\n\n    public countFilter: number = 0;\n\n    public entities: E[] = [];\n\n    public bindings: Object = { };\n\n    public properties: string[] = [];\n\n    public loading: boolean = false;\n\n    public constructor(bindingEngine: BindingEngine, taskQueue: TaskQueue, entityService: EntityService<E>, sorting: Sorting = new Sorting(), defaultFilter: FilterQuery = new FilterQuery(), properties?: string[]) {\n        super();\n        this.bindingEngine = bindingEngine;\n        this.taskQueue = taskQueue;\n        this.sorting = sorting;\n        this.defaultFilter = defaultFilter;\n        this.currentFilter = new FilterQuery();\n        this.entityService = entityService;\n        this.properties = properties;\n    }\n\n    public setDefaultFilter(filter: FilterQuery): void {\n        this.defaultFilter = filter;\n    }\n\n    public setSorting(sorting: Sorting): void {\n        this.sorting = sorting;\n    }\n\n    public setProperties(properties: string[]): void {\n        this.properties = properties;\n    }\n\n    public on<V>(property: string, callback: (filter: FilterQuery, value: V) => void, autoRetrieve: boolean = false): EntityCollector<E> {\n        this.disposables.push(this.bindingEngine.propertyObserver(this.bindings, property).subscribe(value => {\n            this.applyFilter(callback, value);\n            if (autoRetrieve) {\n                this.retrieve();\n            }\n        }));\n        return this;\n    }\n\n    public onCollection<V>(property: string, callback: (filter: FilterQuery, value: V[]) => void, autoRetrieve: boolean = false): EntityCollector<E> {\n        Array.isArray(this.bindings[property]) || (this.bindings[property] = []);\n        this.disposables.push(this.bindingEngine.collectionObserver(this.bindings[property]).subscribe(slices => {\n            this.applyFilter(callback, this.bindings[property]);\n            if (autoRetrieve) {\n                this.retrieve();\n            }\n        }));\n        return this;\n    }\n\n    public count(filter: FilterQuery = this.currentFilter): CancelablePromise<number> {\n        let cancelable = this.entityService.count(new FilterQuery().and(this.defaultFilter, filter));\n        this.countCancelables.push(cancelable);\n        return cancelable;\n    }\n\n    public applyFilter(callback: (FilterQuery, any) => void, value: any): void {\n        callback.call(this, this.currentFilter, value);\n    }\n\n    public activate(filter: FilterBinding, filterMapper: Function = f => new FilterQuery(f)): void {\n        Object.keys(this.bindings).forEach(key => {\n            if (Array.isArray(this.bindings[key])) {\n                let array: any[] = this.bindings[key];\n                let replace: any[] = Array.isArray(filter.bindings[key]) ? filter.bindings[key] : [];\n                array.splice(0, array.length, ...replace);\n            } else if (filter.bindings && filter.bindings.hasOwnProperty(key)) {\n                this.bindings[key] = filter.bindings[key];\n            } else {\n                this.bindings[key] = undefined;\n            }\n        });\n        this.taskQueue.flushMicroTaskQueue();\n        this.currentFilter = filterMapper(filter.query);\n        this.sorting = new Sorting(filter.sorting);\n        this.entities.splice(0);\n        if (this.currentFilter !== null) {\n            this.retrieve(this.limit, 0);\n        }\n    }\n\n    public save(name: string): FilterBinding {\n        let bindings = { };\n        for (let key in this.bindings) {\n            if (Array.isArray(this.bindings[key])) {\n                bindings[key] = this.bindings[key].slice();\n            } else {\n                bindings[key] = this.bindings[key];\n            }\n        }\n        return new FilterBinding(name, new FilterQuery(this.currentFilter), new Sorting(this.sorting), bindings, this.countFilter);\n    }\n\n    public reset(): void {\n        for (let field in this.bindings) {\n            if (Array.isArray(this.bindings[field])) {\n                this.bindings[field].splice(0);\n            } else {\n                this.bindings[field] = undefined;\n            }\n        }\n        this.currentFilter = new FilterQuery();\n        this.sorting = new Sorting();\n    }\n\n    public dispose(): void {\n        this.disposables.forEach(disposable => disposable.dispose());\n        this.loadCancelables.forEach(cancelable => cancelable.cancel());\n        this.countCancelables.forEach(cancelable => cancelable.cancel());\n    }\n\n    public retrieve(limit: number = this.limit, skip: number = this.skip): Promise<E[]> {\n        return this.load(limit, skip).then(this.replaceEntities.bind(this));\n    }\n\n    public retrieveMore(increment: number = EntityCollector.SCROLL_RETRIEVE_INCREMENT): Promise<number> {\n        let skip = this.limit;\n        return this.load(increment, skip).then(this.concatEntities.bind(this)).then(success => this.limit += increment);\n    }\n\n    public hasMore(): boolean {\n        return this.entities.length < this.countFilter;\n    }\n\n    protected replaceEntities(entities: E[]): E[] {\n        return this.entities = entities;\n    }\n\n    protected concatEntities(entities: E[]): E[] {\n        for (let entity of entities) {\n            if (this.entities.indexOf(entity) < 0) {\n                this.entities.push(entity);\n            }\n        }\n        return this.entities;\n    }\n\n    protected load(limit: number, skip: number): Promise<E[]> {\n        this.loadCancelables.forEach(cancelable => cancelable.cancel());\n        this.loading = true;\n        let loadFilter = new FilterQuery().and(this.defaultFilter, this.currentFilter);\n        let countTotalRequest = this.entityService.count();\n        let countFilterRequest = this.entityService.count(this.currentFilter);\n        let retrieveRequest = this.entityService.findAll(loadFilter, limit, skip, this.sorting, this.properties);\n        this.loadCancelables = [ countTotalRequest, countFilterRequest, retrieveRequest ];\n        return Promise.all(this.loadCancelables).then(success => {\n            let [ countTotal, countFilter, entities ] = success;\n            this.loading = false;\n            this.countTotal = countTotal;\n            this.countFilter = countFilter;\n            this.publish(EntityCollector.ENTITIES_LOADED, entities);\n            return entities;\n        });\n    }\n\n}\n"]}