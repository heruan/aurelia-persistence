{"version":3,"sources":["../../src/main/search-boolean-context.ts"],"names":[],"mappings":"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","file":"search-boolean-context.js","sourcesContent":["import { SearchQuery } from \"./search-query\";\nimport { Query } from \"./query\";\n\nexport class SearchBooleanContext implements Query {\n\n    public static BOOLEAN_CONTEXT: string = \"$bool\";\n\n    public static MUST: string = \"$must\";\n\n    public static SHOULD: string = \"$should\";\n\n    private map: Map<string, SearchQuery[]>;\n\n    public constructor(searchBooleanContext?: SearchBooleanContext) {\n        this.map = searchBooleanContext ? new Map<string, any>(searchBooleanContext.map) : new Map<string, any>();\n    }\n\n    public and(...queries: SearchQuery[]): SearchBooleanContext {\n        return this.bool.call(this, SearchBooleanContext.MUST, ...queries);\n    }\n\n    public or(...queries: SearchQuery[]): SearchBooleanContext {\n        return this.bool.call(this, SearchBooleanContext.SHOULD, ...queries);\n    }\n\n    public bool(booleanAggregator: string, ...queries: SearchQuery[]): SearchBooleanContext {\n        if (!this.map.has(booleanAggregator)) {\n            this.map.set(booleanAggregator, []);\n        }\n        let booleanSearch = this.map.get(booleanAggregator);\n        for (let query of queries) {\n            booleanSearch.push(query);\n        }\n        return this;\n    }\n\n    public unsetAnd(...queries: SearchQuery[]): SearchBooleanContext {\n        return this.unsetBool.call(this, SearchBooleanContext.MUST, ...queries);\n    }\n\n    public unsetOr(...queries: SearchQuery[]): SearchBooleanContext {\n        return this.unsetBool.call(this, SearchBooleanContext.SHOULD, ...queries);\n    }\n\n    public unsetBool(booleanAggregator: string, ...queries: SearchQuery[]): SearchBooleanContext {\n        if (this.map.has(booleanAggregator)) {\n            let booleanSearch = this.map.get(booleanAggregator);\n            for (let query of queries) {\n                booleanSearch.splice(booleanSearch.indexOf(query), 1);\n            }\n            if (booleanSearch.length == 0) {\n                this.map.delete(booleanAggregator);\n            }\n        }\n        return this;\n    }\n\n\n    public copy(): SearchBooleanContext {\n        return new SearchBooleanContext(this);\n    }\n\n    public toJSON(): any {\n        if (this.map.size === 0) {\n            return { };\n        } else {\n            let filter = { };\n            this.map.forEach((value, key) => filter[key] = value);\n            return {\n                \"$bool\": filter\n            };\n        }\n    }\n\n}\n"]}