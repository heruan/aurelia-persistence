{"version":3,"sources":["../../src/main/filter-query.ts"],"names":[],"mappings":"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","file":"filter-query.js","sourcesContent":["import { autoinject } from \"aurelia-dependency-injection\";\nimport { GroupFilter } from \"./group-filter\";\nimport { FieldFilter } from \"./field-filter\";\nimport { TextFilter } from \"./text-filter\";\nimport { Query } from \"./query\";\n\n@autoinject\nexport class FilterQuery implements Query {\n\n    public static FILTERING_EVENT: string = \"aurelia.persistence.filtering\";\n\n    private map: Map<string, any>;\n\n    public constructor(filterQuery?: FilterQuery) {\n        this.map = filterQuery ? new Map<string, any>(filterQuery.map) : new Map<string, any>();\n    }\n\n    public field(fieldName: string, fieldFilter: FieldFilter): FilterQuery {\n        this.map.set(fieldName, fieldFilter);\n        return this;\n    }\n\n    public unset(fieldName: string): FilterQuery {\n        this.map.delete(fieldName);\n        return this;\n    }\n\n    public textFields(fieldNames: string[], search: string): FilterQuery {\n        return this.text(new TextFilter(fieldNames, search));\n    }\n\n    public text(textFilter: TextFilter): FilterQuery {\n        this.map.set(TextFilter.TEXT, textFilter);\n        return this;\n    }\n\n    public unsetText(): FilterQuery {\n        this.map.delete(TextFilter.TEXT);\n        return this;\n    }\n\n    public or(...filters: FilterQuery[]): FilterQuery {\n        let args: any[] = [ GroupFilter.OR ];\n        return this.group.apply(this, args.concat(filters));\n    }\n\n    public and(...filters: FilterQuery[]): FilterQuery {\n        let args: any[] = [ GroupFilter.AND ];\n        return this.group.apply(this, args.concat(filters));\n    }\n\n    public not(...filters: FilterQuery[]): FilterQuery {\n        let args: any[] = [ GroupFilter.NOT ];\n        return this.group.apply(this, args.concat(filters));\n    }\n\n    public nor(...filters: FilterQuery[]): FilterQuery {\n        let args: any[] = [ GroupFilter.NOR ];\n        return this.group.apply(this, args.concat(filters));\n    }\n\n    public group(groupAggregator: string, ...filters: FilterQuery[]): FilterQuery {\n        if (!this.map.has(groupAggregator)) {\n            this.map.set(groupAggregator, new GroupFilter());\n        }\n        let groupFilter: GroupFilter = this.map.get(groupAggregator);\n        for (let filter of filters) {\n            groupFilter.add(filter);\n        }\n        return this;\n    }\n\n    public unsetOr(...filters: FilterQuery[]): FilterQuery {\n        let args: any[] = [ GroupFilter.OR ];\n        return this.unsetGroup.apply(this, args.concat(filters));\n    }\n\n    public unsetAnd(...filters: FilterQuery[]): FilterQuery {\n        let args: any[] = [ GroupFilter.AND ];\n        return this.unsetGroup.apply(this, args.concat(filters));\n    }\n\n    public unsetNot(...filters: FilterQuery[]): FilterQuery {\n        let args: any[] = [ GroupFilter.NOT ];\n        return this.unsetGroup.apply(this, args.concat(filters));\n    }\n\n    public unsetNor(...filters: FilterQuery[]): FilterQuery {\n        let args: any[] = [ GroupFilter.NOR ];\n        return this.unsetGroup.apply(this, args.concat(filters));\n    }\n\n    public unsetGroup(groupAggregator: string, ...filters: FilterQuery[]): FilterQuery {\n        if (this.map.has(groupAggregator)) {\n            let groupFilter: GroupFilter = this.map.get(groupAggregator);\n            for (let filter of filters) {\n                groupFilter.remove(filter);\n            }\n            if (groupFilter.size == 0) {\n                this.map.delete(groupAggregator);\n            }\n        }\n        return this;\n    }\n\n    public equalTo(fieldName: string, value: any): FilterQuery {\n        return this.field(fieldName, new FieldFilter().equalTo(value));\n    }\n\n    public notEqualTo(fieldName: string, value: any): FilterQuery {\n        return this.field(fieldName, new FieldFilter().notEqualTo(value));\n    }\n\n    public greaterThan(fieldName: string, value: any): FilterQuery {\n        return this.field(fieldName, new FieldFilter().greaterThan(value));\n    }\n\n    public greaterThanOrEqualTo(fieldName: string, value: any): FilterQuery {\n        return this.field(fieldName, new FieldFilter().greaterThanOrEqualTo(value));\n    }\n\n    public lessThan(fieldName: string, value: any): FilterQuery {\n        return this.field(fieldName, new FieldFilter().lessThan(value));\n    }\n\n    public lessThanOrEqualTo(fieldName: string, value: any): FilterQuery {\n        return this.field(fieldName, new FieldFilter().lessThanOrEqualTo(value));\n    }\n\n    public in(fieldName: string, array: any[]): FilterQuery {\n        return this.field(fieldName, new FieldFilter().in(array));\n    }\n\n    public notIn(fieldName: string, array: any[]): FilterQuery {\n        return this.field(fieldName, new FieldFilter().notIn(array));\n    }\n\n    public mod(fieldName: string, mod: number): FilterQuery {\n        return this.field(fieldName, new FieldFilter().mod(mod));\n    }\n\n    public regex(fieldName: string, regex: string): FilterQuery {\n        return this.field(fieldName, new FieldFilter().regex(regex));\n    }\n\n    public elemMatch(fieldName: string, filter: FilterQuery): FilterQuery {\n        return this.field(fieldName, new FieldFilter().elemMatch(filter));\n    }\n\n    public copy(): FilterQuery {\n        return new FilterQuery(this);\n    }\n\n    public toJSON(): Object {\n        let filter = { };\n        this.map.forEach((value, key) => filter[key] = value);\n        return filter;\n    }\n\n    public static fromJSON(object: Object): FilterQuery {\n        let filter = new FilterQuery();\n        for (let field in object) {\n            switch (field) {\n                case GroupFilter.OR: filter.or(...object[field].map(f => FilterQuery.fromJSON(f)));\n                break;\n                case GroupFilter.AND: filter.and(...object[field].map(f => FilterQuery.fromJSON(f)));\n                break;\n                case GroupFilter.NOT: filter.not(...object[field].map(f => FilterQuery.fromJSON(f)));\n                break;\n                case GroupFilter.NOR: filter.nor(...object[field].map(f => FilterQuery.fromJSON(f)));\n                break;\n                case TextFilter.TEXT: filter.text(TextFilter.fromJSON(object[field]));\n                break;\n                default: filter.field(field, FieldFilter.fromJSON(object[field]));\n            }\n        }\n        return filter;\n    }\n\n}\n"]}