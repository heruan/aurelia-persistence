{"version":3,"sources":["../../src/main/search-term-query.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,+CAA6C;AAE7C;IAAqC,mCAAW;IAU5C,yBAAmB,eAAiC;QAApD,YACI,iBAAO,SAEV;QADG,KAAI,CAAC,GAAG,GAAG,eAAe,GAAG,IAAI,GAAG,CAAc,eAAe,CAAC,GAAG,CAAC,GAAG,IAAI,GAAG,EAAe,CAAC;;IACpG,CAAC;IAEM,kCAAQ,GAAf,UAAgB,QAAwB;QAAxB,yBAAA,EAAA,eAAwB;QACpC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,gCAAM,GAAb,UAAc,MAAgB;QAC1B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAC7C,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,kCAAQ,GAAf,UAAgB,QAAgB;QAC5B,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACjD,MAAM,CAAC,IAAI,CAAC;IAChB,CAAC;IAEM,8BAAI,GAAX;QACI,MAAM,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,CAAC;IACrC,CAAC;IAEM,gCAAM,GAAb;QACI,IAAI,MAAM,GAAG,EAAG,CAAC;QACjB,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,UAAC,KAAK,EAAE,GAAG,IAAK,OAAA,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,EAAnB,CAAmB,CAAC,CAAC;QACtD,MAAM,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;IAClC,CAAC;IAEL,sBAAC;AAAD,CAxCA,AAwCC,CAxCoC,0BAAW;AAE9B,sBAAM,GAAG,SAAS,CAAC;AAEnB,wBAAQ,GAAG,WAAW,CAAC;AAEvB,wBAAQ,GAAG,WAAW,CAAC;AAN5B,0CAAe","file":"search-term-query.js","sourcesContent":["import { SearchQuery } from \"./search-query\";\n\nexport class SearchTermQuery extends SearchQuery {\n\n    public static FIELDS = \"$fields\";\n\n    public static MATCHING = \"$matching\";\n\n    public static WILDCARD = \"$wildcard\";\n\n    private map: Map<string, any>;\n\n    public constructor(searchTermQuery?: SearchTermQuery) {\n        super();\n        this.map = searchTermQuery ? new Map<string, any>(searchTermQuery.map) : new Map<string, any>();\n    }\n\n    public wildcard(wildcard: boolean = true): SearchTermQuery {\n        this.map.set(SearchTermQuery.WILDCARD, wildcard);\n        return this;\n    }\n\n    public fields(fields: string[]): SearchTermQuery {\n        this.map.set(SearchTermQuery.FIELDS, fields);\n        return this;\n    }\n\n    public matching(matching: string): SearchTermQuery {\n        this.map.set(SearchTermQuery.MATCHING, matching);\n        return this;\n    }\n\n    public copy(): SearchTermQuery {\n        return new SearchTermQuery(this);\n    }\n\n    public toJSON(): any {\n        let filter = { };\n        this.map.forEach((value, key) => filter[key] = value);\n        return { \"$keyword\": filter };\n    }\n\n}\n"]}