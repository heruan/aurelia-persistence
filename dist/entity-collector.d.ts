import { BindingEngine, Disposable } from "aurelia-binding";
import { TaskQueue } from "aurelia-task-queue";
import { DataAccessObject } from "./data-access-object";
import { Sorting } from "./sorting";
import { Query } from "./query";
import { FilterQuery } from "./filter-query";
import { FilterBinding } from "./filter-binding";
export declare class EntityCollector<E extends Object> implements Disposable {
    static SCROLL_RETRIEVE_INCREMENT: number;
    private properties;
    private bindingEngine;
    private taskQueue;
    private dataAccessObject;
    private currentFilter;
    private defaultFilter;
    private sorting;
    private limit;
    private skip;
    private countTotal;
    private countFilter;
    private entities;
    private activationPromise;
    private loadCancelables;
    private disposables;
    loading: boolean;
    bindings: Object;
    constructor(bindingEngine: BindingEngine, taskQueue: TaskQueue, dataAccessObject: DataAccessObject<E>, sorting?: Sorting, defaultFilter?: FilterQuery, properties?: string[]);
    on<Q extends Query, V>(property: string, callback: (query: Q, value: V) => void): EntityCollector<E>;
    onCollection<Q extends Query, V>(property: string, callback: (query: Q, value: V[]) => void): EntityCollector<E>;
    count(filter?: Query): Promise<number>;
    applyFilter(callback: (FilterQuery, any) => void, value: any): void;
    activate(filter: FilterBinding): void;
    save(name: string): FilterBinding;
    reset(): void;
    dispose(): void;
    retrieve(limit?: number, skip?: number): Promise<E[]>;
    retrieveMore(increment?: number): Promise<number>;
    protected replaceEntities(entities: E[]): E[];
    protected concatEntities(entities: E[]): E[];
    protected load(limit: number, skip: number): Promise<E[]>;
}
